---
title: "Emerging status determination based on GBIF species occurrence cubes"
editor: visual
project:
  type: website
  output-dir: docs
  execute-dir: project
format:
  html:
    df-print: paged
    toc: true
    toc-float: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-tools: true
execute:
  eval: true
  echo: true
  warning: true
  error: false
  include: true
from: markdown+emoji
---

## Introduction

This document shows an example of how using GBIF species occurrence cubes to assess the emerging status of some (alien) species in Europe. This workflow is strongly based on [**occurrence TrIAS indicators**](https://github.com/trias-project/indicators).

### Setup

First, list and load the needed packages.

```{r pkgs, message=FALSE, warning=FALSE}
library(rgbif)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(tibble)
```

## Scope

### Taxonomic scope

Species of interest:

-   [I*mpatiens capensis*](https://www.gbif.org/species/2891774) ( GBIF key: `2891774`)

-   [*Xenopus laevis*](https://www.gbif.org/species/5217334) ( GBIF key: `5217334`)

-   [*Myriophyllum heterophyllum*](https://www.gbif.org/species/5361762) ( GBIF key: `5361762`)

- [*Contarinia pseudotsugae*](https://www.gbif.org/species/5082110) (GBIF key: `5082110`)

- [*Procyon lotor*](https://www.gbif.org/species/5218786) (GBIF key: `5218786`)

- [*Halyomorpha halys*](https://www.gbif.org/species/4485843) (GBIF key: `4485843`)

- [*Vespa velutina*](https://www.gbif.org/species/1311477) (GBIF key: `1311477`)

- [*Cydalima perspectalis*](https://www.gbif.org/species/4532122) (GBIF key: `4532122`)

- [*Exaireta spinigera*](https://www.gbif.org/species/1579447) (GBIF key: `1579447`)

- [*Hermetia illucens*](https://www.gbif.org/species/1577153) (GBIF key: `1577153`)

```{r define-species-of-interest}
species <- tibble::tibble(
  specieskey = c(2891774,
                 5217334,
                 5361762,
                 5082110, 
                 5218786,
                 1311477,
                 4532122,
                 1579447,
                 1577153),
  canonical_name = c("Impatiens capensis",
                     "Xenopus laevis",
                     "Myriophyllum heterophyllum",
                     "Contarinia pseudotsugae",
                     "Procyon lotor",
                     "Halyomorpha halys",
                     "Vespa velutina",
                     "Cydalima perspectalis",
                     "Exaireta spinigera",
                     "Hermetia illucens")
)
```

### Spatial scope

We are interested over the emerging status of the four species in **Europe**.

### Temporal scope

We request a species occurrence cube based on data from **1950**.

## Species occurrence cube

We triggered a GBIF occurrence cube via the [Occurrence SQL Download API](https://techdocs.gbif.org/en/data-use/api-sql-downloads) and on the hand of a JSON query ([query_for_GAM_graphs.json](../../data/input/query_for_GAM_graphs.json)). The resulting cube (DOI: [10.15468/dl.93evf5](https://doi.org/10.15468/dl.93evf5), downloadKey: `0066568-241126133413365`) can be downloaded in TSV format from GBIF. We have it saved at `data/input` as [`0066568-241126133413365.csv`](../../data/input/0066568-241126133413365.csv):

```{r read-cube, message=FALSE}
cube <- readr::read_tsv(
  here::here(
    "data",
    "input",
    "0066568-241126133413365.csv"
  )
)
```

Preview:

```{r}
head(cube)
```

## From cubes to emerging status

### Preprocess: from cube to time series

We assess the emerging status of the four species in Europe for 2023. First, we create time series up to 2023 as the data of 2024 could be not yet entirely published.

```{r}
last_year <- 2023
```

For each species, define cells with at least one observation:

```{r}
df_cc <-   cube |>
  dplyr::group_by(specieskey) |>
  dplyr::distinct(eeacellcode) |>
  dplyr::ungroup()
```

For each species, identify the first year with at least one observation:

```{r}
df_begin_year <-
  cube |>
  dplyr::group_by(specieskey) |>
  dplyr::summarize(begin_year = min(year))
```

For each species, combine `begin_year` and unique `eeacellcode` as found above:

```{r}
df_cc <-   df_cc |>
  dplyr::left_join(df_begin_year, by = "specieskey") |> 
  dplyr::select(specieskey, begin_year, eeacellcode)
```

Preview:

```{r}
head(df_cc)
```

For each cell (`eeacellcode`) and species (`specieskey`) we can now create a time series:

```{r}
# Define help fuction
make_time_series <- function(eeacellcode, specieskey, begin_year, last_year) {
  tidyr::expand_grid(
    eeacellcode = eeacellcode,
    specieskey = specieskey,
    year = seq(from = begin_year, to = last_year)
  )
}

# Create timeseries slots
df_ts <- purrr::pmap_dfr(df_cc,
  .f = make_time_series,
  last_year = last_year
)

# Add occurrence data
df_ts <-
  df_ts |>
  dplyr::left_join(
    cube |> dplyr::select(
      specieskey,
      year,
      eeacellcode,
      occurrences
    ),
    by = c("specieskey", "year", "eeacellcode")
  )

# Replace NAs with 0
df_ts <-
  df_ts |>
  tidyr::replace_na(list(occurrences = 0))
```

Add column for presence (1) or absence (0):

```{r}
df_ts <-
  df_ts |>
  dplyr::mutate(
    ispresent = dplyr::if_else(occurrences > 0, 1, 0)
  )
```

Save the time series as an interim output:

```{r save-time-series, message: false}
readr::write_tsv(
  df_ts,
  here::here("data", "interim", "time_series.tsv"),
  na = ""
)
```

### Apply GAM

We are now ready to apply GAM to assess the emerging status of the four species in 2023.

```{r}
eval_year <- 2023
```

Let's compact the time series:

```{r}
compact_df_ts <- df_ts |>
    dplyr::group_by(specieskey, year) |>
    dplyr::summarise(
      occs = sum(occurrences),
      ncells = sum(ispresent),
      .groups = "drop")
```

Plots will be saved in `./data/output/GAM_outputs` directory:

```{r root-output-gam}
dir_name_basic <- here::here("data", "output", "GAM_outputs")
```

We also define the plot dimensions in pixels:

```{r dims-plot}
plot_dimensions <- list(width = 2800, height = 1500)
```

We apply GAM for each taxon for the number of occurrences:

```{r run-gam-occs}
gam_occs <- purrr::map2(
    species$specieskey, species$canonical_name,
    function(t, n) {
      df_key <- compact_df_ts |>
        dplyr::filter(specieskey == t)
      trias::apply_gam(
        df = df_key,
        y_var = "occs",
        taxonKey = "specieskey",
        eval_years = 2023,
        type_indicator = "observations",
        taxon_key = t,
        name = n,
        dir_name = dir_name_basic,
        y_label = "observations",
        saveplot = TRUE,
        width = plot_dimensions$width,
        height = plot_dimensions$height
      )
    })
names(gam_occs) <- species$canonical_name
```

And the number of occupied cells, or *measured occupancy*:

```{r run-gam-ncells}
gam_ncells <- purrr::map2(
    species$specieskey, species$canonical_name,
    function(t, n) {
      df_key <- compact_df_ts |>
        dplyr::filter(specieskey == t)
      trias::apply_gam(
        df = df_key,
        y_var = "ncells",
        taxonKey = "specieskey",
        eval_years = 2023,
        type_indicator = "occupancy",
        taxon_key = t,
        name = n,
        dir_name = dir_name_basic,
        y_label = "number of occupied cells",
        saveplot = TRUE,
        width = plot_dimensions$width,
        height = plot_dimensions$height
      )
    })
names(gam_ncells) <- species$canonical_name
```

Let's arrange the four GAM plots in a 2x2 grid. First, for the number of occurrences:

```{r grid_occs}
grid_occs <- purrr::map(
  gam_occs,
  function(x) {
    x$plot
  }
) |>
  patchwork::wrap_plots(ncol = 2)
grid_occs
```

Second, for the number of occupied cells:

```{r grid_ncells}
grid_ncells <- purrr::map(
  gam_ncells,
  function(x) {
    x$plot
  }
) |>
  patchwork::wrap_plots(ncol = 2)
grid_ncells
```
