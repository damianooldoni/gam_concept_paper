[
  {
    "objectID": "src/from_cube_to_emerging_status.html",
    "href": "src/from_cube_to_emerging_status.html",
    "title": "Emerging status determination based on GBIF species occurrence cubes",
    "section": "",
    "text": "This document shows an example of how using GBIF species occurrence cubes to assess the emerging status of some (alien) species in Europe. This workflow is strongly based on occurrence TrIAS indicators.\n\n\nFirst, list and load the needed packages.\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(trias)"
  },
  {
    "objectID": "src/from_cube_to_emerging_status.html#introduction",
    "href": "src/from_cube_to_emerging_status.html#introduction",
    "title": "Emerging status determination based on GBIF species occurrence cubes",
    "section": "",
    "text": "This document shows an example of how using GBIF species occurrence cubes to assess the emerging status of some (alien) species in Europe. This workflow is strongly based on occurrence TrIAS indicators.\n\n\nFirst, list and load the needed packages.\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(trias)"
  },
  {
    "objectID": "src/from_cube_to_emerging_status.html#scope",
    "href": "src/from_cube_to_emerging_status.html#scope",
    "title": "Emerging status determination based on GBIF species occurrence cubes",
    "section": "2 Scope",
    "text": "2 Scope\n\n2.1 Taxonomic scope\nSpecies of interest:\n\nImpatiens capensis (GBIF key: 2891774)\nXenopus laevis (GBIF key: 5217334)\nMyriophyllum heterophyllum (GBIF key: 5361762)\nContarinia pseudotsugae (GBIF key: 5082110)\nProcyon lotor (GBIF key: 5218786)\nHalyomorpha halys (GBIF key: 4485843)\nVespa velutina (GBIF key: 1311477)\nCydalima perspectalis (GBIF key: 4532122)\nExaireta spinigera (GBIF key: 1579447)\nHermetia illucens (GBIF key: 1577153)\nFagus sylvatica\n\n\n\nCode\nspecies &lt;- tibble::tibble(\n  specieskey = c(2891774,\n                 5217334,\n                 5361762,\n                 5082110, \n                 5218786,\n                 4485843,\n                 1311477,\n                 4532122,\n                 1579447,\n                 1577153,\n                 2882316),\n  canonical_name = c(\"Impatiens capensis\",\n                     \"Xenopus laevis\",\n                     \"Myriophyllum heterophyllum\",\n                     \"Contarinia pseudotsugae\",\n                     \"Procyon lotor\",\n                     \"Halyomorpha halys\",\n                     \"Vespa velutina\",\n                     \"Cydalima perspectalis\",\n                     \"Exaireta spinigera\",\n                     \"Hermetia illucens\",\n                     \"Fagus sylvatica\")\n)\n\n\n\n\n2.2 Spatial scope\nWe are interested over the emerging status of the four species in Europe.\n\n\n2.3 Temporal scope\nWe request a species occurrence cube based on data from 1950."
  },
  {
    "objectID": "src/from_cube_to_emerging_status.html#species-occurrence-cube",
    "href": "src/from_cube_to_emerging_status.html#species-occurrence-cube",
    "title": "Emerging status determination based on GBIF species occurrence cubes",
    "section": "3 Species occurrence cube",
    "text": "3 Species occurrence cube\nWe triggered a GBIF occurrence cube via the Occurrence SQL Download API and on the hand of a JSON query (query_for_GAM_graphs.json). The resulting cube (DOI: 10.15468/dl.nsa8b3, downloadKey: 0001083-250121130708018) can be downloaded in TSV format from GBIF. We have it saved at data/input as 0001083-250121130708018.csv:\n\n\nCode\ncube &lt;- readr::read_tsv(\n  here::here(\n    \"data\",\n    \"input\",\n    \"0001083-250121130708018.csv\"\n  )\n)\n\n\nPreview:\n\n\nCode\nhead(cube)"
  },
  {
    "objectID": "src/from_cube_to_emerging_status.html#from-cubes-to-emerging-status",
    "href": "src/from_cube_to_emerging_status.html#from-cubes-to-emerging-status",
    "title": "Emerging status determination based on GBIF species occurrence cubes",
    "section": "4 From cubes to emerging status",
    "text": "4 From cubes to emerging status\n\n4.1 Preprocess: from cube to time series\nWe assess the emerging status of the species in Europe for 2023. First, we create time series up to 2023 as the data of 2024 could be not yet entirely published.\n\n\nCode\nlast_year &lt;- 2023\n\n\nFor each species, define cells with at least one observation:\n\n\nCode\ndf_cc &lt;-   cube |&gt;\n  dplyr::group_by(specieskey) |&gt;\n  dplyr::distinct(eeacellcode) |&gt;\n  dplyr::ungroup()\n\n\nFor each species, identify the first year with at least one observation:\n\n\nCode\ndf_begin_year &lt;-\n  cube |&gt;\n  dplyr::group_by(specieskey) |&gt;\n  dplyr::summarize(begin_year = min(year))\n\n\nFor each species, combine begin_year and unique eeacellcode as found above:\n\n\nCode\ndf_cc &lt;-   df_cc |&gt;\n  dplyr::left_join(df_begin_year, by = \"specieskey\") |&gt; \n  dplyr::select(specieskey, begin_year, eeacellcode)\n\n\nPreview:\n\n\nCode\nhead(df_cc)\n\n\n\n  \n\n\n\nFor each cell (eeacellcode) and species (specieskey) we can now create a time series:\n\n\nCode\n# Define help function\nmake_time_series &lt;- function(eeacellcode, specieskey, begin_year, last_year) {\n  tidyr::expand_grid(\n    eeacellcode = eeacellcode,\n    specieskey = specieskey,\n    year = seq(from = begin_year, to = last_year)\n  )\n}\n\n# Create timeseries slots\ndf_ts &lt;- purrr::pmap_dfr(df_cc,\n  .f = make_time_series,\n  last_year = last_year\n)\n\n# Add occurrence data\ndf_ts &lt;-\n  df_ts |&gt;\n  dplyr::left_join(\n    cube |&gt; dplyr::select(\n      specieskey,\n      year,\n      eeacellcode,\n      occurrences\n    ),\n    by = c(\"specieskey\", \"year\", \"eeacellcode\")\n  )\n\n# Replace NAs with 0\ndf_ts &lt;-\n  df_ts |&gt;\n  tidyr::replace_na(list(occurrences = 0))\n\n\nAdd column for presence (1) or absence (0):\n\n\nCode\ndf_ts &lt;-\n  df_ts |&gt;\n  dplyr::mutate(\n    ispresent = dplyr::if_else(occurrences &gt; 0, 1, 0)\n  )\n\n\nSave the time series as an interim output:\n\n\nCode\nreadr::write_tsv(\n  df_ts,\n  here::here(\"data\", \"interim\", \"time_series.tsv\"),\n  na = \"\"\n)\n\n\n\n\n4.2 Apply GAM\nWe are now ready to apply GAM to assess the emerging status of the four species in 2023.\n\n\nCode\neval_year &lt;- 2023\n\n\nLetâ€™s compact the time series:\n\n\nCode\ncompact_df_ts &lt;- df_ts |&gt;\n    dplyr::group_by(specieskey, year) |&gt;\n    dplyr::summarise(\n      occs = sum(occurrences),\n      ncells = sum(ispresent),\n      .groups = \"drop\")\n\n\nPlots will be saved in ./data/output/GAM_outputs directory:\n\n\nCode\ndir_name_basic &lt;- here::here(\"data\", \"output\", \"GAM_outputs\")\n\n\nWe also define the plot dimensions in pixels:\n\n\nCode\nplot_dimensions &lt;- list(width = 2800, height = 1500)\n\n\nWe apply GAM for each taxon for the number of occurrences:\n\n\nCode\ngam_occs &lt;- purrr::map2(\n    species$specieskey, species$canonical_name,\n    function(t, n) {\n      df_key &lt;- compact_df_ts |&gt;\n        dplyr::filter(specieskey == t)\n      trias::apply_gam(\n        df = df_key,\n        y_var = \"occs\",\n        taxonKey = \"specieskey\",\n        eval_years = 2023,\n        type_indicator = \"observations\",\n        taxon_key = t,\n        name = n,\n        dir_name = dir_name_basic,\n        y_label = \"observations\",\n        saveplot = TRUE,\n        width = plot_dimensions$width,\n        height = plot_dimensions$height\n      )\n    })\nnames(gam_occs) &lt;- species$canonical_name\n\n\nAnd the number of occupied cells, or measured occupancy:\n\n\nCode\ngam_ncells &lt;- purrr::map2(\n    species$specieskey, species$canonical_name,\n    function(t, n) {\n      df_key &lt;- compact_df_ts |&gt;\n        dplyr::filter(specieskey == t)\n      trias::apply_gam(\n        df = df_key,\n        y_var = \"ncells\",\n        taxonKey = \"specieskey\",\n        eval_years = 2023,\n        type_indicator = \"occupancy\",\n        taxon_key = t,\n        name = n,\n        dir_name = dir_name_basic,\n        y_label = \"number of occupied cells\",\n        saveplot = TRUE,\n        width = plot_dimensions$width,\n        height = plot_dimensions$height\n      )\n    })\nnames(gam_ncells) &lt;- species$canonical_name"
  },
  {
    "objectID": "src/from_cube_to_emerging_status.html#plots",
    "href": "src/from_cube_to_emerging_status.html#plots",
    "title": "Emerging status determination based on GBIF species occurrence cubes",
    "section": "5 Plots",
    "text": "5 Plots\nPlease go to ./data/output/GAM_outputs to download the plots shown in this section.\n\n5.1 Standard plots\nIn this section we show and save the plots as returned by apply_gam(). Folder: ./data/output/GAM_outputs.\n\n5.1.1 Occurrences\n\n\nCode\npurrr::walk(gam_occs, function(x) print(x$plot))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Occupancy\n\n\nCode\npurrr::walk(gam_ncells, function(x) print(x$plot))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2 Short titles\nWe show and save plots with the species only as title. We save them in sub folder ./data/output/GAM_outputs/short_title.\n\n5.2.1 Occurrences\n\n\nCode\npurrr::iwalk(gam_occs, function(x, y) {\n  x$plot &lt;- x$plot + \n    # remove title from plot objects\n    ggplot2::ggtitle(label = y)\n  ggplot2::ggsave(\n    filename = here::here(\"data\",\n                          \"output\",\n                          \"GAM_outputs\",\n                          \"short_title\",\n                          paste0(y, \"_occurrences_short_title.png\")),\n    plot = x$plot,\n    width = plot_dimensions$width,\n    height = plot_dimensions$height,\n    units = \"px\"\n  )\n  print(x$plot)\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.2 Occupancy\nWe do the same for the measured occupancy (number of occupied grid cells).\n\n\nCode\npurrr::iwalk(gam_ncells, function(x, y) {\n  # Reduce title of the plot objects to species only\n  x$plot &lt;- x$plot + ggplot2::ggtitle(label = y)\n  ggplot2::ggsave(\n    filename = here::here(\"data\",\n                          \"output\",\n                          \"GAM_outputs\",\n                          \"short_title\",\n                          paste0(y, \"_occupancy_short_title.png\")),\n    plot = x$plot,\n    width = plot_dimensions$width,\n    height = plot_dimensions$height,\n    units = \"px\"\n  )\n  print(x$plot)\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3 Grid\nFor the paper, we need to arrange the plots in a grid. Of course now we have too many plots. So, letâ€™s use just four GAM plots in a 2x2 grid. Plots saved in subfolder ./data/output/GAM_outputs/grid.\nSelect the species:\n\n\nCode\nspecies_to_show &lt;- c(\"Impatiens capensis\",\n                     \"Myriophyllum heterophyllum\",\n                     \"Procyon lotor\",\n                     \"Fagus sylvatica\")\n# Extract list elements for the species to show (number of occurrences)\ngam_occs_to_show &lt;- purrr::map(species_to_show, ~gam_occs[[.x]])\nnames(gam_occs_to_show) &lt;- species_to_show\n# Extract list elements for the species to show (occupancy)\ngam_ncells_to_show &lt;- purrr::map(species_to_show, ~gam_ncells[[.x]])\nnames(gam_ncells_to_show) &lt;- species_to_show\n\n\n\n5.3.1 Non uniform axis\nWe show and save the grid for number of occurrences (filename occurrences_non_uniform_axis.png):\n\n\nCode\ngrid_occs &lt;- purrr::imap(gam_occs_to_show, function(x, y) {\n  # Reduce title of the plot objects to species only\n  x$plot &lt;- x$plot + ggplot2::ggtitle(label = y)\n  # Change size of the title\n  x$plot &lt;- x$plot + \n    ggplot2::theme(plot.title = ggplot2::element_text(size = 12))\n  }) |&gt;\n  patchwork::wrap_plots(nrow = 2, ncol = 2) +\n  # Unify legends\n  patchwork::plot_layout(guides = 'collect')\ngrid_occs\n\n\n\n\n\n\n\n\n\nCode\n# Save the grid\nggplot2::ggsave(\n  filename = here::here(\"data\",\n                        \"output\",\n                        \"GAM_outputs\",\n                        \"grid\",\n                        \"occurrences_non_uniform_axis.png\"),\n  plot = grid_occs,\n  width = plot_dimensions$width,\n  height = plot_dimensions$height,\n  units = \"px\",\n  dpi = 300\n)\n\n\nWe show and save the grid for the number of occupied cells (measured occupancy):\n\n\nCode\ngrid_ncells &lt;- purrr::imap(gam_ncells_to_show, function(x, y) {\n  # Reduce title of the plot objects to species only\n  x$plot &lt;- x$plot + ggplot2::ggtitle(label = y)\n  # Change size of the title\n  x$plot &lt;- x$plot + \n    ggplot2::theme(plot.title = ggplot2::element_text(size = 12))\n  }) |&gt;\n  patchwork::wrap_plots(nrow = 2, ncol = 2) +\n  # Unify legends\n  patchwork::plot_layout(guides = 'collect')\ngrid_ncells\n\n\n\n\n\n\n\n\n\nCode\n# Save the grid\nggplot2::ggsave(\n  filename = here::here(\"data\",\n                        \"output\",\n                        \"GAM_outputs\",\n                        \"grid\",\n                        \"occupancy_non_uniform_axis.png\"),\n  plot = grid_ncells,\n  width = plot_dimensions$width,\n  height = plot_dimensions$height,\n  units = \"px\",\n  dpi = 300\n)\n\n\n\n\n5.3.2 Uniform axis\nWe show and save plots using the same axis limits (x, y) for all species.\nNumber of occurrences:\n\n\nCode\n# Get the maximum value of y axis (occs) among all plots\nmax_y_occs &lt;- max(\n  purrr::map_dbl(species_to_show, function(x) {\n  max(gam_occs_to_show[[x]]$plot$data$occs)\n  })\n)\n# Get minimum value of x axis (year) among all plots\nmin_x_year &lt;- min(\n  purrr::map_dbl(species_to_show, function(x) {\n  min(gam_occs_to_show[[x]]$plot$data$year)\n  })\n)\n\n# Set same scales (x,y axis)\ngrid_occs_uniform &lt;- purrr::imap(gam_occs_to_show, function(x, y) {\n  x$plot &lt;- x$plot + \n    ggplot2::coord_cartesian(xlim = c(min_x_year, 2023),\n                             ylim = c(0, max_y_occs))\n  # Reduce title of the plot objects to species only\n  x$plot &lt;- x$plot + ggplot2::ggtitle(label = y)\n  # Change size of the title\n  x$plot &lt;- x$plot + \n    ggplot2::theme(plot.title = ggplot2::element_text(size = 12))\n}) |&gt;\n  patchwork::wrap_plots(nrow = 2, ncol = 2) +\n  # Unify legends\n  patchwork::plot_layout(guides = 'collect')\ngrid_occs_uniform\n\n\n\n\n\n\n\n\n\nCode\n# Save\nggplot2::ggsave(\n  filename = here::here(\n    \"data\",\n    \"output\",\n    \"GAM_outputs\",\n    \"grid\",\n    \"occurrences_short_title_uniform_axis.png\"),\n  plot = grid_occs_uniform,\n  width = plot_dimensions$width,\n  height = plot_dimensions$height,\n  units = \"px\",\n  dpi = 300\n)\n\n\n\n\n5.3.3 Occupancy\nWe do the same for the number of occupied cells (measured occupancy):\n\n\nCode\n# Get the maximum value of y axis (ncells) among all plots\nmax_y_ncells &lt;- max(\n  purrr::map_dbl(species_to_show, function(x) {\n  max(gam_ncells_to_show[[x]]$plot$data$ncells)\n  })\n)\n# Get minimum value of x axis (year) among all plots\nmin_x_year &lt;- min(\n  purrr::map_dbl(species_to_show, function(x) {\n  min(gam_ncells_to_show[[x]]$plot$data$year)\n  })\n)\n# Set same scales (x,y axis)\ngrid_ncells_uniform &lt;- purrr::imap(gam_ncells_to_show, function(x, y) {\n  # Adjust range x and y axis\n  x$plot &lt;- x$plot + \n    ggplot2::coord_cartesian(\n      xlim = c(min_x_year, 2023),\n      ylim = c(0, max_y_ncells)\n  )\n  # Reduce title of the plot objects to species only\n  x$plot &lt;- x$plot + ggplot2::ggtitle(label = y)\n  # Change size of the title\n  x$plot &lt;- x$plot + \n    ggplot2::theme(plot.title = ggplot2::element_text(size = 12))\n})  |&gt;\n  patchwork::wrap_plots(nrow = 2, ncol = 2) +\n  # Unify legends\n  patchwork::plot_layout(guides = 'collect')\ngrid_ncells_uniform\n\n\n\n\n\n\n\n\n\nCode\n# Save\nggplot2::ggsave(\n  filename = here::here(\n    \"data\",\n    \"output\",\n    \"GAM_outputs\",\n    \"grid\",\n    \"occupancy_short_title_uniform_axis.png\"\n  ),\n  plot = grid_ncells_uniform,\n  width = plot_dimensions$width,\n  height = plot_dimensions$height,\n  units = \"px\",\n  dpi = 300\n)"
  }
]